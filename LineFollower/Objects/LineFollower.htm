<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LineFollower.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LineFollower.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jan 07 14:07:41 2019
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__aeabi_unwind_cpp_pr0 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[d5]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">CRYP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">FSMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">__default_new_handler()</a> from newhandler.o(i._Z21__default_new_handlerv) referenced from new.o(i._Znwj)
 <LI><a href="#[76]">InterfacePwm::~InterfacePwm__deallocating()</a> from main.o(i._ZN12InterfacePwmD0Ev) referenced from main.o(.constdata__ZTV12InterfacePwm)
 <LI><a href="#[75]">InterfacePwm::~InterfacePwm__sub_object()</a> from main.o(i._ZN12InterfacePwmD2Ev) referenced from main.o(.constdata__ZTV12InterfacePwm)
 <LI><a href="#[73]">[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[74]">[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[6e]">[local to unwinder_c]::EIT_comparator(const void*, const void*)</a> from unwinder.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[6b]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[6d]">[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</a> from arm_exceptions_throw.o(.text) referenced from arm_exceptions_throw.o(.text)
 <LI><a href="#[79]">Pwm::pwmInitPinTim10(unsigned)</a> from pwm.o(i._ZN3Pwm15pwmInitPinTim10Ej) referenced from pwm.o(.constdata__ZTV3Pwm)
 <LI><a href="#[7a]">Pwm::pwmInitPinTim11(unsigned)</a> from pwm.o(i._ZN3Pwm15pwmInitPinTim11Ej) referenced from pwm.o(.constdata__ZTV3Pwm)
 <LI><a href="#[7b]">Pwm::setPeriodeTim10(unsigned)</a> from pwm.o(i._ZN3Pwm15setPeriodeTim10Ej) referenced from pwm.o(.constdata__ZTV3Pwm)
 <LI><a href="#[7c]">Pwm::setPeriodeTim11(unsigned)</a> from pwm.o(i._ZN3Pwm15setPeriodeTim11Ej) referenced from pwm.o(.constdata__ZTV3Pwm)
 <LI><a href="#[78]">Pwm::~Pwm()</a> from main.o(i._ZN3PwmD1Ev) referenced from pwm.o(.constdata__ZTV3Pwm)
 <LI><a href="#[6a]">__ARM::default_unexpected_handler()</a> from arm_exceptions_unexpected.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[7d]">STM32F407::SPI::transceive(unsigned char*, unsigned, unsigned char*)</a> from spi.o(i._ZN9STM32F4073SPI10transceiveEPhjS1_) referenced from spi.o(.constdata__ZTVN9STM32F4073SPIE)
 <LI><a href="#[7e]">STM32F407::SPI::acquire()</a> from spi.o(i._ZN9STM32F4073SPI7acquireEv) referenced from spi.o(.constdata__ZTVN9STM32F4073SPIE)
 <LI><a href="#[7f]">STM32F407::SPI::release()</a> from spi.o(i._ZN9STM32F4073SPI7releaseEv) referenced from spi.o(.constdata__ZTVN9STM32F4073SPIE)
 <LI><a href="#[80]">std::bad_typeid::~bad_typeid__deallocating()</a> from bad_typeid.o(i._ZNSt10bad_typeidD0Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[70]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[70]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from arm_exceptions_bad_typeid.o(.text)
 <LI><a href="#[81]">std::bad_exception::~bad_exception__deallocating()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[69]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[69]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from arm_exceptions_callunex.o(.text)
 <LI><a href="#[82]">std::bad_alloc::~bad_alloc__deallocating()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[71]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[71]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from newhandler.o(i._Z21__default_new_handlerv)
 <LI><a href="#[6f]">__aeabi_unwind_cpp_pr0</a> from unwind_pr0.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[6c]">__cxa_call_unexpected</a> from arm_exceptions_callunex.o(.text) referenced from unwind_prcommon.o(.text)
 <LI><a href="#[77]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from main.o(.constdata__ZTV12InterfacePwm)
 <LI><a href="#[77]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from spi.o(.constdata__ZTV4ISpi)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[66]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[83]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[85]"></a>__cxa_end_cleanup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arm_exceptions_cleanup.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
</UL>

<P><STRONG><a name="[5]"></a>__ARM_Unwind_VRS_VFPpreserve_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>__ARM_Unwind_VRS_VFPpreserve_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>__ARM_Unwind_VRS_VFPrestore_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>__ARM_Unwind_VRS_VFPrestore_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[b3]"></a>__ARM_Unwind_VRS_corerestore</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>

<P><STRONG><a name="[88]"></a>_Unwind_RaiseException</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[87]"></a>_Unwind_Resume</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[a8]"></a>_Unwind_Activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unwind_activity.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__ARM::call_terminate_handler(_Unwind_Control_Block*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
</UL>

<P><STRONG><a name="[90]"></a>__cxa_call_terminate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[92]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __cxa_begin_cleanup &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[86]"></a>__ARM_cxa_end_cleanup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwind_pr0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = __aeabi_unwind_cpp_pr0 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>__cxa_free_exception</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arm_exceptions_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __cxa_free_exception &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_free
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
</UL>

<P><STRONG><a name="[8f]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::default_unexpected_handler()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[98]"></a>__ARM::same_exceptions_class(const void*, const void*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[8e]"></a>__ARM::is_foreign_exception(_Unwind_Control_Block*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[6c]"></a>__cxa_call_unexpected</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, arm_exceptions_callunex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = __cxa_call_unexpected &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwind_prcommon.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__cxa_begin_catch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, arm_exceptions_begincatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
</UL>

<P><STRONG><a name="[93]"></a>__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_foreign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
</UL>

<P><STRONG><a name="[8d]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[95]"></a>__ARM_unwind_cpp_prcommon</STRONG> (Thumb, 1474 bytes, Stack size 96 bytes, unwind_prcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwind_pr_c]::next_unwind_byte(uwdata*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
</UL>

<P><STRONG><a name="[e6]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[a3]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[e7]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[9f]"></a>__cxa_allocate_exception</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_allocate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[a5]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[ab]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[96]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[9c]"></a>__cxa_rethrow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_rethrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[9a]"></a>__cxa_end_catch</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, arm_exceptions_endcatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxa_end_catch &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[a1]"></a>__cxa_throw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[9b]"></a>__cxa_type_match</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator !=(const std::type_info&) const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[99]"></a>std::unexpected()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::unexpected() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[6a]"></a>__ARM::default_unexpected_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __ARM::default_unexpected_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[a6]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[aa]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 272 bytes, Stack size 288 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[b2]"></a>__ARM_unwind_next_frame</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[89]"></a>__ARM_Unwind_RaiseException</STRONG> (Thumb, 206 bytes, Stack size 352 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[8a]"></a>__ARM_Unwind_Resume</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, unwinder.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[a2]"></a>_Unwind_Complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Unwind_Complete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[84]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__cxa_bad_typeid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arm_exceptions_bad_typeid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
</UL>

<P><STRONG><a name="[ac]"></a>_Unwind_DeleteException</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unwind_delete.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[b1]"></a>bsearch</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioC()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioB()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioA()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[be]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioC()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[c1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[ba]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[c3]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[b9]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[c2]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
</UL>

<P><STRONG><a name="[f5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; [local to system_stm32f4xx_c]::SetSysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to system_stm32f4xx_c]::SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim11()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim10()
</UL>

<P><STRONG><a name="[da]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim11()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim10()
</UL>

<P><STRONG><a name="[d6]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim11(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmInitPinTim10(unsigned)
</UL>

<P><STRONG><a name="[bd]"></a>initGpioASpi1()</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, main.o(i._Z13initGpioASpi1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initGpioASpi1() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>__default_new_handler()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, newhandler.o(i._Z21__default_new_handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __default_new_handler() &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[c6]"></a>initGpioA()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i._Z9initGpioAv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initGpioA() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>initGpioB()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i._Z9initGpioBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initGpioB() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>initGpioC()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._Z9initGpioCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initGpioC() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gyro.o(i._ZN11GyroL3Gxxxx11initSPIGyroEPN9STM32F4073SPIEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char) &rArr; GyroL3Gxxxx::writeRegister(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::setSensitivityGyroDPS(unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::writeRegister(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>GyroL3Gxxxx::writeRegister(unsigned char, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gyro.o(i._ZN11GyroL3Gxxxx13writeRegisterEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GyroL3Gxxxx::writeRegister(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[cc]"></a>GyroL3Gxxxx::getDataVelGyroXRad()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gyro.o(i._ZN11GyroL3Gxxxx18getDataVelGyroXRadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GyroL3Gxxxx::getDataVelGyroXRad()
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getSensitivityGyroDPS()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>GyroL3Gxxxx::getDataVelGyroYRad()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gyro.o(i._ZN11GyroL3Gxxxx18getDataVelGyroYRadEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getSensitivityGyroDPS()
</UL>

<P><STRONG><a name="[cf]"></a>GyroL3Gxxxx::getDataVelGyroZRad()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gyro.o(i._ZN11GyroL3Gxxxx18getDataVelGyroZRadEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getSensitivityGyroDPS()
</UL>

<P><STRONG><a name="[d0]"></a>GyroL3Gxxxx::getDataVelGyroXYZRad(float*, float*, float*)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, gyro.o(i._ZN11GyroL3Gxxxx20getDataVelGyroXYZRadEPfS0_S0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getSensitivityGyroDPS()
</UL>

<P><STRONG><a name="[cd]"></a>GyroL3Gxxxx::getSensitivityGyroDPS()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro.o(i._ZN11GyroL3Gxxxx21getSensitivityGyroDPSEv))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::setSensitivityGyroDPS(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getDataVelGyroXYZRad(float*, float*, float*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getDataVelGyroZRad()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getDataVelGyroYRad()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getDataVelGyroXRad()
</UL>

<P><STRONG><a name="[cb]"></a>GyroL3Gxxxx::setSensitivityGyroDPS(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, gyro.o(i._ZN11GyroL3Gxxxx21setSensitivityGyroDPSEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GyroL3Gxxxx::setSensitivityGyroDPS(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getSensitivityGyroDPS()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f6]"></a>GyroL3Gxxxx::~GyroL3Gxxxx()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN11GyroL3GxxxxD1Ev), UNUSED)

<P><STRONG><a name="[f7]"></a>GyroL3Gxxxx::~GyroL3Gxxxx__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN11GyroL3GxxxxD1Ev), UNUSED)

<P><STRONG><a name="[76]"></a>InterfacePwm::~InterfacePwm__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN12InterfacePwmD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InterfacePwm::~InterfacePwm__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePwm::~InterfacePwm__sub_object()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV12InterfacePwm)
</UL>
<P><STRONG><a name="[75]"></a>InterfacePwm::~InterfacePwm__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN12InterfacePwmD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::~Pwm()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePwm::~InterfacePwm__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV12InterfacePwm)
</UL>
<P><STRONG><a name="[dd]"></a>Pwm::getPeriodeTim10()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i._ZN3Pwm15getPeriodeTim10Ev))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::setDutyCycleTim10(signed char)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>Pwm::getPeriodeTim11()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i._ZN3Pwm15getPeriodeTim11Ev))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::setDutyCycleTim11(signed char)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Pwm::pwmInitPinTim10(unsigned)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pwm.o(i._ZN3Pwm15pwmInitPinTim10Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pwm::pwmInitPinTim10(unsigned) &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3Pwm)
</UL>
<P><STRONG><a name="[7a]"></a>Pwm::pwmInitPinTim11(unsigned)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pwm.o(i._ZN3Pwm15pwmInitPinTim11Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pwm::pwmInitPinTim11(unsigned) &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3Pwm)
</UL>
<P><STRONG><a name="[7b]"></a>Pwm::setPeriodeTim10(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i._ZN3Pwm15setPeriodeTim10Ej))
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3Pwm)
</UL>
<P><STRONG><a name="[7c]"></a>Pwm::setPeriodeTim11(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i._ZN3Pwm15setPeriodeTim11Ej))
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3Pwm)
</UL>
<P><STRONG><a name="[d8]"></a>Pwm::pwmModeInitTim10()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, pwm.o(i._ZN3Pwm16pwmModeInitTim10Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pwm::pwmModeInitTim10() &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Pwm::pwmModeInitTim11()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, pwm.o(i._ZN3Pwm16pwmModeInitTim11Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pwm::pwmModeInitTim11() &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Pwm::setDutyCycleTim10(signed char)</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, pwm.o(i._ZN3Pwm17setDutyCycleTim10Ea), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::getPeriodeTim10()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorMove(signed char, signed char)
</UL>

<P><STRONG><a name="[de]"></a>Pwm::setDutyCycleTim11(signed char)</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, pwm.o(i._ZN3Pwm17setDutyCycleTim11Ea), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::getPeriodeTim11()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorMove(signed char, signed char)
</UL>

<P><STRONG><a name="[e9]"></a>Pwm::Pwm()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZN3PwmC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>Pwm::Pwm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN3PwmC1Ev), UNUSED)

<P><STRONG><a name="[78]"></a>Pwm::~Pwm()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i._ZN3PwmD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pwm::~Pwm()
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePwm::~InterfacePwm__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3Pwm)
</UL>
<P><STRONG><a name="[f9]"></a>Pwm::~Pwm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN3PwmD1Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>ISpi::ISpi__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i._ZN4ISpiC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F407::SPI::SPI()
</UL>

<P><STRONG><a name="[ea]"></a>Motor::initPwm(Pwm*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor7initPwmEP3Pwm))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>Motor::motorMove(signed char, signed char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, motor.o(i._ZN5Motor9motorMoveEaa), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::setDutyCycleTim11(signed char)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::setDutyCycleTim10(signed char)
</UL>

<P><STRONG><a name="[fa]"></a>Motor::~Motor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN5MotorD1Ev), UNUSED)

<P><STRONG><a name="[fb]"></a>Motor::~Motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN5MotorD1Ev), UNUSED)

<P><STRONG><a name="[eb]"></a>STM32F407::SPI::initialize(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, spi.o(i._ZN9STM32F4073SPI10initializeEP11SPI_TypeDefP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STM32F407::SPI::initialize(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>STM32F407::SPI::transceive(unsigned char*, unsigned, unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, spi.o(i._ZN9STM32F4073SPI10transceiveEPhjS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32F407::SPI::transceive(unsigned char*, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN9STM32F4073SPIE)
</UL>
<P><STRONG><a name="[7e]"></a>STM32F407::SPI::acquire()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi.o(i._ZN9STM32F4073SPI7acquireEv))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN9STM32F4073SPIE)
</UL>
<P><STRONG><a name="[7f]"></a>STM32F407::SPI::release()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(i._ZN9STM32F4073SPI7releaseEv))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN9STM32F4073SPIE)
</UL>
<P><STRONG><a name="[e1]"></a>STM32F407::SPI::SPI()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(i._ZN9STM32F4073SPIC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F407::SPI::SPI()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::ISpi__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>STM32F407::SPI::SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, spi.o(i._ZN9STM32F4073SPIC1Ev), UNUSED)

<P><STRONG><a name="[fd]"></a>STM32F407::SPI::~SPI()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN9STM32F4073SPID1Ev), UNUSED)

<P><STRONG><a name="[fe]"></a>STM32F407::SPI::~SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN9STM32F4073SPID1Ev), UNUSED)

<P><STRONG><a name="[9d]"></a>std::type_info::operator ==(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_eq.o(i._ZNKSt9type_infoeqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[ae]"></a>std::type_info::operator !=(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_ne.o(i._ZNKSt9type_infoneERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator !=(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[b8]"></a>std::bad_typeid::bad_typeid(const std::bad_typeid&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid(const std::bad_typeid&)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[ff]"></a>std::bad_typeid::bad_typeid__sub_object(const std::bad_typeid&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_), UNUSED)

<P><STRONG><a name="[b7]"></a>std::bad_typeid::bad_typeid()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid()
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[100]"></a>std::bad_typeid::bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev), UNUSED)

<P><STRONG><a name="[80]"></a>std::bad_typeid::~bad_typeid__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::bad_typeid::~bad_typeid__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[70]"></a>std::bad_typeid::~bad_typeid()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::~bad_typeid()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_exceptions_bad_typeid.o(.text)
<LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[101]"></a>std::bad_typeid::~bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev), UNUSED)

<P><STRONG><a name="[a0]"></a>std::bad_exception::bad_exception(const std::bad_exception&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception(const std::bad_exception&)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[102]"></a>std::bad_exception::bad_exception__sub_object(const std::bad_exception&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[9e]"></a>std::bad_exception::bad_exception()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[103]"></a>std::bad_exception::bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[81]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[69]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::~bad_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_exceptions_callunex.o(.text)
<LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[104]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>std::bad_alloc::bad_alloc(const std::bad_alloc&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[105]"></a>std::bad_alloc::bad_alloc__sub_object(const std::bad_alloc&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_), UNUSED)

<P><STRONG><a name="[c4]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[106]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[71]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::~bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> newhandler.o(i._Z21__default_new_handlerv)
<LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[107]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev), UNUSED)

<P><STRONG><a name="[e3]"></a>std::exception::exception(const std::exception&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>

<P><STRONG><a name="[108]"></a>std::exception::exception__sub_object(const std::exception&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[e4]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>

<P><STRONG><a name="[109]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePwm::~InterfacePwm__deallocating()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
</UL>

<P><STRONG><a name="[e5]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_common_get_typeid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arm_exceptions_throw.o(i.__ARM_common_get_typeid))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = __ARM_common_get_typeid &rArr; __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[77]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spi.o(.constdata__ZTV4ISpi)
<LI> main.o(.constdata__ZTV12InterfacePwm)
</UL>
<P><STRONG><a name="[af]"></a>__derived_to_base_conversion</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, rtti.o(i.__derived_to_base_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[e8]"></a>__dynamic_cast</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, rtti.o(i.__dynamic_cast), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[97]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[66]"></a>main</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char) &rArr; GyroL3Gxxxx::writeRegister(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F407::SPI::SPI()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F407::SPI::initialize(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::initPwm(Pwm*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim11()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::pwmModeInitTim10()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::getPeriodeTim11()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::getPeriodeTim10()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::getDataVelGyroXRad()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroL3Gxxxx::initSPIGyro(STM32F407::SPI*, unsigned char, unsigned char)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioC()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioB()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioA()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpioASpi1()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a4]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8b]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>

<P><STRONG><a name="[bc]"></a>[local to system_stm32f4xx_c]::SetSysClock()</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i._ZN40_INTERNAL_18_system_stm32f4xx_c_5d646a6711SetSysClockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to system_stm32f4xx_c]::SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>[local to unwind_pr_c]::next_unwind_byte(uwdata*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, unwind_prcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[6d]"></a>[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = [local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*) &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_throw.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>[local to unwinder_c]::EIT_comparator(const void*, const void*)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to unwinder_c]::EIT_comparator(const void*, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[73]"></a>[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[74]"></a>[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[d2]"></a>[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b021traverse_base_classesEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[d4]"></a>[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b023find_base_class_at_addrEPvS0_PKSt9type_infoS3_Pi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
</UL>

<P><STRONG><a name="[d3]"></a>[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b024get_virtual_base_pointerEPvPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[d5]"></a>[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</STRONG> (Thumb, 476 bytes, Stack size 96 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b028derived_to_base_conversion_rEPvPS0_PKSt9type_infoS4_jPiiPS4_P19a_result_virtualityS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + In Cycle
<LI>Call Chain = [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
